{"version":3,"sources":["../src/FacetSearchResponseAdapter.js"],"names":["FacetSearchResponseAdapter","typesenseResponse","instantsearchRequest","typesenseFacetCounts","adaptedResult","facet","find","field_name","params","facetName","counts","map","facetCount","value","highlighted","_adaptHighlightTag","highlightPreTag","highlightPostTag","count","facetHits","_adaptFacetHits","facet_counts","exhaustiveFacetsCount","processingTimeMS","search_time_ms","Object","assign","prototype","utils"],"mappings":"AAAA;;;;;;;;;;;;;AAEA;;IAEaA,0B;AACX,sCAAYC,iBAAZ,EAA+BC,oBAA/B,EAAqD;AAAA;AACnD,SAAKD,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACD;;;;WAED,yBAAgBC,oBAAhB,EAAsC;AAAA;;AACpC,UAAIC,aAAa,GAAG,EAApB;AACA,UAAMC,KAAK,GAAGF,oBAAoB,CAACG,IAArB,CAA0B,UAACD,KAAD;AAAA,eAAWA,KAAK,CAACE,UAAN,KAAqB,KAAI,CAACL,oBAAL,CAA0BM,MAA1B,CAAiCC,SAAjE;AAAA,OAA1B,CAAd;AAEAL,MAAAA,aAAa,GAAGC,KAAK,CAACK,MAAN,CAAaC,GAAb,CAAiB,UAACC,UAAD;AAAA,eAAiB;AAChDC,UAAAA,KAAK,EAAED,UAAU,CAACC,KAD8B;AAEhDC,UAAAA,WAAW,EAAE,KAAI,CAACC,kBAAL,CACXH,UAAU,CAACE,WADA,EAEX,KAAI,CAACZ,oBAAL,CAA0BM,MAA1B,CAAiCQ,eAFtB,EAGX,KAAI,CAACd,oBAAL,CAA0BM,MAA1B,CAAiCS,gBAHtB,CAFmC;AAOhDC,UAAAA,KAAK,EAAEN,UAAU,CAACM;AAP8B,SAAjB;AAAA,OAAjB,CAAhB;AAUA,aAAOd,aAAP;AACD;;;WAED,iBAAQ;AACN,UAAMA,aAAa,GAAG;AACpBe,QAAAA,SAAS,EAAE,KAAKC,eAAL,CAAqB,KAAKnB,iBAAL,CAAuBoB,YAA5C,CADS;AAEpBC,QAAAA,qBAAqB,EAAE,IAFH;AAGpBC,QAAAA,gBAAgB,EAAE,KAAKtB,iBAAL,CAAuBuB;AAHrB,OAAtB;AAKA,aAAOpB,aAAP;AACD;;;;;;AAGHqB,MAAM,CAACC,MAAP,CAAc1B,0BAA0B,CAAC2B,SAAzC,EAAoDC,YAApD","sourcesContent":["\"use strict\";\n\nimport { utils } from \"./support/utils\";\n\nexport class FacetSearchResponseAdapter {\n  constructor(typesenseResponse, instantsearchRequest) {\n    this.typesenseResponse = typesenseResponse;\n    this.instantsearchRequest = instantsearchRequest;\n  }\n\n  _adaptFacetHits(typesenseFacetCounts) {\n    let adaptedResult = {};\n    const facet = typesenseFacetCounts.find((facet) => facet.field_name === this.instantsearchRequest.params.facetName);\n\n    adaptedResult = facet.counts.map((facetCount) => ({\n      value: facetCount.value,\n      highlighted: this._adaptHighlightTag(\n        facetCount.highlighted,\n        this.instantsearchRequest.params.highlightPreTag,\n        this.instantsearchRequest.params.highlightPostTag\n      ),\n      count: facetCount.count,\n    }));\n\n    return adaptedResult;\n  }\n\n  adapt() {\n    const adaptedResult = {\n      facetHits: this._adaptFacetHits(this.typesenseResponse.facet_counts),\n      exhaustiveFacetsCount: true,\n      processingTimeMS: this.typesenseResponse.search_time_ms,\n    };\n    return adaptedResult;\n  }\n}\n\nObject.assign(FacetSearchResponseAdapter.prototype, utils);\n"],"file":"FacetSearchResponseAdapter.js"}