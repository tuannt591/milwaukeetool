{"version":3,"sources":["../src/AnvereInstantsearchAdapter.js"],"names":["axios","require","AnvereInstantsearchAdapter","options","configuration","Configuration","validate","searchClient","search","instantsearchRequests","searchAnvereAndAdapt","searchForFacetValues","searchAnvereForFacetValuesAndAdapt","server","nodes","applicationId","anvereUrlWithParams","URL","protocol","host","searchParams","set","indexName","params","query","page","hitsPerPage","get","href","anvereResponse","data","adaptAndPerformAnvereRequest","results","_adaptAndPerformTypesenseRequest","typesenseResponse","adaptedResponses","map","typesenseResult","index","_validateTypesenseResult","responseAdapter","FacetSearchResponseAdapter","adapt","console","error","Error","code","hits","grouped_hits"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { Configuration } from \"./Configuration\";\nimport { FacetSearchResponseAdapter } from \"./FacetSearchResponseAdapter\";\nconst axios = require(\"axios\");\n\nexport default class AnvereInstantsearchAdapter {\n  constructor(options) {\n    this.configuration = new Configuration(options);\n    this.configuration.validate();\n    this.searchClient = {\n      search: (instantsearchRequests) => this.searchAnvereAndAdapt(instantsearchRequests),\n      searchForFacetValues: (instantsearchRequests) =>\n        this.searchAnvereForFacetValuesAndAdapt(instantsearchRequests),\n    };\n  }\n  async adaptAndPerformAnvereRequest(instantsearchRequests) {\n    const server = this.configuration.server;\n    const nodes = server.nodes;\n    const applicationId = nodes[0].applicationId;\n\n    const anvereUrlWithParams = new URL(`${nodes[0].protocol}://${nodes[0].host}/docs`);\n    anvereUrlWithParams.searchParams.set(\"app_id\", applicationId);\n    anvereUrlWithParams.searchParams.set(\"index_id\", instantsearchRequests[0].indexName);\n    anvereUrlWithParams.searchParams.set(\"input\", instantsearchRequests[0].params.query);\n    anvereUrlWithParams.searchParams.set(\"highlight\", \"true\");\n    anvereUrlWithParams.searchParams.set(\"page\", instantsearchRequests[0].params.page);\n    anvereUrlWithParams.searchParams.set(\"page_size\", instantsearchRequests[0].params.hitsPerPage);\n\n    const anvereResponse = await axios.get(anvereUrlWithParams.href);\n\n    return anvereResponse.data;\n  }\n  async searchAnvereAndAdapt(instantsearchRequests) {\n    try {\n      const anvereResponse = await this.adaptAndPerformAnvereRequest(instantsearchRequests);\n      return {\n        results: [anvereResponse],\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async searchAnvereForFacetValuesAndAdapt(instantsearchRequests) {\n    let typesenseResponse;\n    try {\n      typesenseResponse = await this._adaptAndPerformTypesenseRequest(instantsearchRequests);\n\n      const adaptedResponses = typesenseResponse.results.map((typesenseResult, index) => {\n        this._validateTypesenseResult(typesenseResult);\n        const responseAdapter = new FacetSearchResponseAdapter(\n          typesenseResult,\n          instantsearchRequests[index],\n          this.configuration\n        );\n        return responseAdapter.adapt();\n      });\n\n      return adaptedResponses;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  _validateTypesenseResult(typesenseResult) {\n    if (typesenseResult.error) {\n      throw new Error(`${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n    if (!typesenseResult.hits && !typesenseResult.grouped_hits) {\n      throw new Error(`Did not find any hits. ${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n  }\n}\n"],"file":"AnvereInstantsearchAdapter.js"}